// commands/moderation/moderate.js
const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const LogManager = require('../../logger/logManager');

module.exports = {
  name: 'moderate',
  description: 'Sistema unificado de modera√ß√£o (warn, mute, kick, ban)',
  aliases: ['mod'],
  usage: '<@usu√°rio> <warn|mute|kick|ban> [dura√ß√£o para mute] [motivo]',
  permissions: 'ManageMessages',
  cooldown: 3,
  
  async execute(message, args, client) {
    // Verificar permiss√µes
    if (!message.member.permissions.has(PermissionFlagsBits.ManageMessages)) {
      return message.reply('‚ùå Voc√™ n√£o tem permiss√£o para usar comandos de modera√ß√£o.');
    }
    
    // Verificar argumentos
    if (args.length < 2) {
      return message.reply(`‚ùå Uso incorreto! Use: \`${client.config.PREFIX}moderate <@usu√°rio> <warn|mute|kick|ban> [dura√ß√£o para mute] [motivo]\``);
    }
    
    // Analisar argumentos
    const userMention = args[0];
    const action = args[1].toLowerCase();
    let duration = null;
    let reason = null;
    
    // Verificar a√ß√£o solicitada
    const validActions = ['warn', 'mute', 'kick', 'ban'];
    if (!validActions.includes(action)) {
      return message.reply(`‚ùå A√ß√£o inv√°lida! Use uma das seguintes: ${validActions.join(', ')}`);
    }
    
    // Obter usu√°rio mencionado
    const userId = userMention.replace(/[<@!>]/g, '');
    let targetMember;
    try {
      targetMember = await message.guild.members.fetch(userId);
    } catch (error) {
      return message.reply('‚ùå Usu√°rio n√£o encontrado. Certifique-se de mencionar um usu√°rio v√°lido.');
    }
    
    // Verificar se o bot pode moderar o usu√°rio alvo
    if (targetMember.roles.highest.position >= message.member.roles.highest.position && message.author.id !== message.guild.ownerId) {
      return message.reply('‚ùå Voc√™ n√£o pode moderar um usu√°rio com cargo igual ou superior ao seu.');
    }
    
    if (targetMember.roles.highest.position >= message.guild.members.me.roles.highest.position) {
      return message.reply('‚ùå N√£o posso moderar um usu√°rio com cargo superior ao meu.');
    }
    
    // Processar dura√ß√£o para mute
    if (action === 'mute' && args.length > 2) {
      const durationArg = args[2].toLowerCase();
      const durationRegex = /^(\d+)(s|m|h|d)$/;
      const match = durationArg.match(durationRegex);
      
      if (match) {
        const value = parseInt(match[1]);
        const unit = match[2];
        
        // Converter para milissegundos
        const multipliers = {
          's': 1000, // segundo
          'm': 60 * 1000, // minuto
          'h': 60 * 60 * 1000, // hora
          'd': 24 * 60 * 60 * 1000 // dia
        };
        
        duration = value * multipliers[unit];
        reason = args.slice(3).join(' ') || 'Nenhum motivo fornecido';
      } else {
        // Se n√£o for um formato de dura√ß√£o v√°lido, considerar como parte do motivo
        reason = args.slice(2).join(' ') || 'Nenhum motivo fornecido';
      }
    } else {
      // Para outras a√ß√µes, o motivo come√ßa no terceiro argumento
      reason = args.slice(2).join(' ') || 'Nenhum motivo fornecido';
    }
    
    // Executar a a√ß√£o solicitada
    try {
      switch (action) {
        case 'warn':
          await handleWarn(message, targetMember, reason);
          break;
        case 'mute':
          await handleMute(message, targetMember, duration, reason);
          break;
        case 'kick':
          await handleKick(message, targetMember, reason);
          break;
        case 'ban':
          await handleBan(message, targetMember, reason);
          break;
      }
      
      // Registrar a√ß√£o no sistema de logs
      const durationText = duration ? formatDuration(duration) : null;
      
      await LogManager.logModAction(client, {
        moderator: message.author,
        target: targetMember.user,
        action: action.toUpperCase(),
        reason,
        duration: durationText
      });
      
    } catch (error) {
      console.error(`‚ùå Erro ao executar a√ß√£o ${action}:`, error);
      return message.reply(`‚ùå Ocorreu um erro ao executar a a√ß√£o: ${error.message}`);
    }
  }
};

// Fun√ß√£o para lidar com advert√™ncias
async function handleWarn(message, targetMember, reason) {
  // Enviar advert√™ncia ao usu√°rio via DM
  try {
    await targetMember.send(`‚ö†Ô∏è Voc√™ recebeu uma advert√™ncia no servidor **${message.guild.name}**\n**Motivo:** ${reason}\n**Moderador:** ${message.author.tag}`);
  } catch (err) {
    console.log(`N√£o foi poss√≠vel enviar DM para ${targetMember.user.tag}`);
  }
  
  // Confirmar no canal que a advert√™ncia foi enviada
  const embed = new EmbedBuilder()
    .setTitle('‚ö†Ô∏è Usu√°rio Advertido')
    .setColor('#FFCC00')
    .setDescription(`${targetMember.user.tag} foi advertido.`)
    .addFields(
      { name: 'Usu√°rio', value: `${targetMember}`, inline: true },
      { name: 'Moderador', value: `${message.author}`, inline: true },
      { name: 'Motivo', value: reason }
    )
    .setTimestamp();
  
  await message.reply({ embeds: [embed] });
}

// Fun√ß√£o para lidar com silenciamentos
async function handleMute(message, targetMember, duration, reason) {
  // Verificar se o bot tem permiss√£o
  if (!message.guild.members.me.permissions.has(PermissionFlagsBits.ModerateMembers)) {
    throw new Error('N√£o tenho permiss√£o para silenciar membros.');
  }
  
  // Calcular dura√ß√£o (padr√£o: 10 minutos)
  const muteTime = duration || 10 * 60 * 1000;
  const expireTime = new Date(Date.now() + muteTime);
  
  // Silenciar usu√°rio
  await targetMember.timeout(muteTime, reason);
  
  // Notificar usu√°rio via DM
  try {
    await targetMember.send(`üîá Voc√™ foi silenciado no servidor **${message.guild.name}**\n**Dura√ß√£o:** ${formatDuration(muteTime)}\n**Motivo:** ${reason}\n**Moderador:** ${message.author.tag}`);
  } catch (err) {
    console.log(`N√£o foi poss√≠vel enviar DM para ${targetMember.user.tag}`);
  }
  
  // Confirmar no canal
  const embed = new EmbedBuilder()
    .setTitle('üîá Usu√°rio Silenciado')
    .setColor('#FF9900')
    .setDescription(`${targetMember.user.tag} foi silenciado.`)
    .addFields(
      { name: 'Usu√°rio', value: `${targetMember}`, inline: true },
      { name: 'Moderador', value: `${message.author}`, inline: true },
      { name: 'Dura√ß√£o', value: formatDuration(muteTime), inline: true },
      { name: 'Expira em', value: `<t:${Math.floor(expireTime.getTime() / 1000)}:R>`, inline: true },
      { name: 'Motivo', value: reason }
    )
    .setTimestamp();
  
  await message.reply({ embeds: [embed] });
}

// Fun√ß√£o para lidar com expuls√µes
async function handleKick(message, targetMember, reason) {
  // Verificar se o bot tem permiss√£o
  if (!message.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers)) {
    throw new Error('N√£o tenho permiss√£o para expulsar membros.');
  }
  
  // Notificar usu√°rio via DM antes de expulsar
  try {
    await targetMember.send(`üë¢ Voc√™ foi expulso do servidor **${message.guild.name}**\n**Motivo:** ${reason}\n**Moderador:** ${message.author.tag}`);
  } catch (err) {
    console.log(`N√£o foi poss√≠vel enviar DM para ${targetMember.user.tag}`);
  }
  
  // Expulsar usu√°rio
  await targetMember.kick(reason);
  
  // Confirmar no canal
  const embed = new EmbedBuilder()
    .setTitle('üë¢ Usu√°rio Expulso')
    .setColor('#FF3300')
    .setDescription(`${targetMember.user.tag} foi expulso do servidor.`)
    .addFields(
      { name: 'Usu√°rio', value: `${targetMember.user.tag} (${targetMember.user.id})`, inline: true },
      { name: 'Moderador', value: `${message.author.tag}`, inline: true },
      { name: 'Motivo', value: reason }
    )
    .setTimestamp();
  
  await message.reply({ embeds: [embed] });
}

// Fun√ß√£o para lidar com banimentos
async function handleBan(message, targetMember, reason) {
  // Verificar se o bot tem permiss√£o
  if (!message.guild.members.me.permissions.has(PermissionFlagsBits.BanMembers)) {
    throw new Error('N√£o tenho permiss√£o para banir membros.');
  }
  
  // Notificar usu√°rio via DM antes de banir
  try {
    await targetMember.send(`üî® Voc√™ foi banido do servidor **${message.guild.name}**\n**Motivo:** ${reason}\n**Moderador:** ${message.author.tag}`);
  } catch (err) {
    console.log(`N√£o foi poss√≠vel enviar DM para ${targetMember.user.tag}`);
  }
  
  // Banir usu√°rio
  await targetMember.ban({ reason });
  
  // Confirmar no canal
  const embed = new EmbedBuilder()
    .setTitle('üî® Usu√°rio Banido')
    .setColor('#CC0000')
    .setDescription(`${targetMember.user.tag} foi banido permanentemente do servidor.`)
    .addFields(
      { name: 'Usu√°rio', value: `${targetMember.user.tag} (${targetMember.user.id})`, inline: true },
      { name: 'Moderador', value: `${message.author.tag}`, inline: true },
      { name: 'Motivo', value: reason }
    )
    .setTimestamp();
  
  await message.reply({ embeds: [embed] });
}

// Fun√ß√£o para formatar dura√ß√£o em texto leg√≠vel
function formatDuration(ms) {
  // Converter milissegundos para unidades de tempo
  const seconds = Math.floor((ms / 1000) % 60);
  const minutes = Math.floor((ms / (1000 * 60)) % 60);
  const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);
  const days = Math.floor(ms / (1000 * 60 * 60 * 24));
  
  // Construir string de dura√ß√£o
  const parts = [];
  
  if (days > 0) parts.push(`${days} dia${days !== 1 ? 's' : ''}`);
  if (hours > 0) parts.push(`${hours} hora${hours !== 1 ? 's' : ''}`);
  if (minutes > 0) parts.push(`${minutes} minuto${minutes !== 1 ? 's' : ''}`);
  if (seconds > 0) parts.push(`${seconds} segundo${seconds !== 1 ? 's' : ''}`);
  
  return parts.join(', ') || 'menos de 1 segundo';
}